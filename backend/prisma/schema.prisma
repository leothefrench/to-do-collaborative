generator client {
  provider = "prisma-client-js"
  output   = "../generated/prisma"
}

datasource db {
  provider = "sqlite"
  url      = env("DATABASE_URL")
}

model User {
  id String @id @default(uuid())
  userName String @unique 
  email String @unique
  password String
  plan                  Plan        @default(FREE)
  stripeSubscriptionId  String?     @unique
  ownedTaskLists TaskList[] 
  sharedTaskLists TaskListShare[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum Plan {
  FREE
  PREMIUM
}

model TaskList {
  id String @id @default(uuid())
  name String
  description String?
  ownerId String 
  owner User @relation(fields: [ownerId], references: [id], onDelete: Cascade)
  sharedWithUsers  TaskListShare[]
  tasks       Task[] 
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Task {    
  id String @id @default(uuid())
  title String
  description String?
  status State
  dueDate DateTime?
  priority Priority
  taskListId String  
  taskList TaskList @relation(fields: [taskListId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

enum State  {
  TODO
  IN_PROGRESS
  DONE
}

enum Priority  {
  LOW
  MEDIUM
  HIGH
}

model TaskListShare {
  id String @id @default(uuid())
  // 1. Si la liste est supprimée, l'enregistrement de partage est supprimé.
  taskListShare TaskList @relation(fields: [taskListId], references: [id], onDelete: Cascade)
  taskListId String
  // 2. Si l'utilisateur est supprimé, l'enregistrement de partage le concernant est supprimé.
  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  userId String
  permissionLevel PermissionLevel
  sharedAt DateTime @default(now())
}

enum PermissionLevel {
  READ_ONLY
  EDIT
  ADMIN
}