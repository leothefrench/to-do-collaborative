'use client';

// ðŸŸ¢ AJOUT : Imports pour gÃ©rer la navigation et le rafraÃ®chissement des donnÃ©es.
import { useRouter } from 'next/navigation';
import { useTransition } from 'react';
// ðŸŸ¢ AJOUT : Imports de TanStack Query pour la gestion des mutations et du cache.
import { useMutation, useQueryClient } from '@tanstack/react-query';
import { useForm } from 'react-hook-form';
import { z } from 'zod';
import { zodResolver } from '@hookform/resolvers/zod';
import { SheetContent, SheetHeader, SheetTitle } from '@/components/ui/sheet';
import { Button } from '@/components/ui/button';
import { Label } from '@/components/ui/label';
import { Input } from '@/components/ui/input';
import { Textarea } from '@/components/ui/textarea';
import { toast } from 'sonner';

// ðŸŸ¢ AJOUT : Import de la Server Action pour la crÃ©ation de la liste de tÃ¢ches.
import { createTaskList } from '@/actions/taskActions';

const taskListSchema = z.object({
  name: z.string().min(1, 'Le nom est requis'),
  description: z.string().optional(),
});

type TaskListFormValues = z.infer<typeof taskListSchema>;

type NewTaskListFormProps = {
  token: string;
};

export default function NewTaskListForm({ token }: NewTaskListFormProps) {
  // ðŸŸ¢ AJOUT : On rÃ©cupÃ¨re l'instance du routeur et du client de requÃªte pour gÃ©rer la navigation et le cache.
  const router = useRouter();
  const queryClient = useQueryClient();
  // ðŸŸ¢ AJOUT : useTransition gÃ¨re l'Ã©tat de la soumission pour l'interface utilisateur.
  const [isPending, startTransition] = useTransition();

  const form = useForm<TaskListFormValues>({
    resolver: zodResolver(taskListSchema),
    defaultValues: {
      name: '',
      description: '',
    },
  });

  // ðŸŸ¢ AJOUT : useMutation pour appeler la Server Action et gÃ©rer les Ã©tats asynchrones.
  const { mutate, isPending: isMutating } = useMutation({
    mutationFn: async (data: TaskListFormValues) => {
      const formData = new FormData();
      formData.append('name', data.name);
      formData.append('description', data.description || '');

      const result = await createTaskList(formData, token);
      if (result && result.success === false) {
        throw new Error(result.message);
      }
      return result;
    },
    // ðŸŸ¢ AJOUT : GÃ¨re le succÃ¨s de la mutation.
    onSuccess: () => {
      // Invalide le cache de TanStack Query pour rafraÃ®chir la liste.
      queryClient.invalidateQueries({ queryKey: ['taskLists', token] });
      // RafraÃ®chit la page cÃ´tÃ© serveur pour garantir que la nouvelle liste apparaÃ®t.
      startTransition(() => {
        router.refresh();
      });
      // Affiche une notification de succÃ¨s.
      toast.success('Liste crÃ©Ã©e avec succÃ¨s !');
      // RÃ©initialise le formulaire.
      form.reset();
    },
    // ðŸŸ¢ AJOUT : GÃ¨re l'erreur de la mutation.
    onError: (error) => {
      toast.error(error.message);
    },
  });

  // ðŸŸ¢ MODIFICATION : onSubmit appelle maintenant la fonction `mutate` du hook `useMutation`.
  const onSubmit = (data: TaskListFormValues) => {
    mutate(data);
  };

  return (
    <SheetContent side="right" className="sm:max-w-md">
      <SheetHeader>
        <SheetTitle>CrÃ©er une nouvelle liste</SheetTitle>
      </SheetHeader>

      <form
        onSubmit={form.handleSubmit(onSubmit)}
        className="flex flex-col gap-4 mt-4"
        aria-label="Formulaire de crÃ©ation de liste de tÃ¢ches"
      >
        <div className="flex flex-col gap-2">
          <Label htmlFor="name">Nom</Label>
          <Input
            id="name"
            placeholder="Nom de la liste"
            {...form.register('name')}
          />
          {form.formState.errors.name && (
            <p className="text-red-500 text-sm">
              {form.formState.errors.name.message}
            </p>
          )}
        </div>

        <div className="flex flex-col gap-2">
          <Label htmlFor="description">Description</Label>
          <Textarea
            id="description"
            placeholder="Description optionnelle"
            {...form.register('description')}
          />
        </div>
        {/* ðŸŸ¢ MODIFICATION : Le bouton est dÃ©sactivÃ© pendant la soumission. */}
        <Button
          type="submit"
          className="mt-2"
          disabled={isMutating || isPending}
        >
          {isMutating || isPending ? 'CrÃ©ation...' : 'Ajouter la liste'}
        </Button>
      </form>
    </SheetContent>
  );
}
